#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<arpa/inet.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<pthread.h>
#include<time.h>

#define BUF_SIZE 100                // 메시지 버퍼 크기
#define MAX_CLNT 100                // 최대 클라이언트 수
#define MAX_IP 30                   // 최대 IP 길이

void* handle_clnt(void* arg);       // 클라이언트 처리 함수 선언
void send_msg(char* msg, int len);  // 메시지 전체 전송 함수 선언
void error_handling(char* msg);     // 에러 처리 함수 선언
char* serverState(int count);       // 서버 상태 반환 함수
void menu(char port[ ]);            // 서버 정보 출력 함수

int clnt_cnt = 0;                   // 현재 접속한 클라이언트 수
int clnt_socks[MAX_CLNT];          // 클라이언트 소켓 배열
pthread_mutex_t mutx;              // 뮤텍스 변수

int main(int argc, char* argv[])
{
    int serv_sock, clnt_sock;                          // 서버 및 클라이언트 소켓
    struct sockaddr_in serv_adr, clnt_adr;             // 서버/클라이언트 주소 구조체
    int clnt_adr_sz;                                   // 클라이언트 주소 크기
    pthread_t t_id;                                    // 스레드 ID

    struct tm* t;                                      // 시간 구조체
    time_t timer = time(NULL);                         // 현재 시간
    t = localtime(&timer);                             // 지역 시간 변환

    if (argc != 2)                                     // 인자 개수 확인
    {
        printf("Usage : %s <port>\n", argv[0]);
        exit(1);
    }

    menu(argv[1]);                                     // 서버 시작 정보 출력
    pthread_mutex_init(&mutx, NULL);                   // 뮤텍스 초기화

    serv_sock = socket(PF_INET, SOCK_STREAM, 0);       // 서버 소켓 생성
    memset(&serv_adr, 0, sizeof(serv_adr));            // 구조체 초기화
    serv_adr.sin_family = AF_INET;                     // IPv4 설정
    serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);      // 모든 IP에서 접속 허용
    serv_adr.sin_port = htons(atoi(argv[1]));          // 포트 번호 설정

    if (bind(serv_sock, (struct sockaddr *)&serv_adr, sizeof(serv_adr)) == -1)
        error_handling("bind( ) error");               // 바인드 실패 시 종료

    if (listen(serv_sock, 5) == -1)                    // 연결 요청 대기
        error_handling("listen( ) error");

    while(1)                                           // 클라이언트 연결 루프
    {
        t = localtime(&timer);                         // 접속 시간 업데이트
        clnt_adr_sz = sizeof(clnt_adr);                // 클라이언트 주소 크기 설정
        clnt_sock = accept(serv_sock, (struct sockaddr *)&clnt_adr, &clnt_adr_sz); // 연결 수락

        pthread_mutex_lock(&mutx);                     // 뮤텍스 잠금
        clnt_socks[clnt_cnt++] = clnt_sock;            // 클라이언트 소켓 배열에 저장
        pthread_mutex_unlock(&mutx);                   // 뮤텍스 해제

        pthread_create(&t_id, NULL, handle_clnt, (void *)&clnt_sock);  // 스레드 생성
        pthread_detach(t_id);                          // 스레드 분리

        printf("Connceted client IP : %s ", inet_ntoa(clnt_adr.sin_addr)); // IP 출력
        printf("(%d-%d-%d %d:%d)\n", t->tm_year + 1900, t->tm_mon + 1, t->tm_mday,
               t->tm_hour, t->tm_min);                 // 접속 시간 출력
        printf("chatter (%d/100)\n", clnt_cnt);        // 현재 접속자 수 출력
    }

    close(serv_sock);                                  // 서버 소켓 종료
    return 0;
}

void* handle_clnt(void* arg)
{
    int clnt_sock = *((int *)arg);                     // 클라이언트 소켓 추출
    int str_len = 0, i;
    char msg[BUF_SIZE];                                // 메시지 버퍼

    while ((str_len = read(clnt_sock, msg, sizeof(msg))) != 0)
        send_msg(msg, str_len);                        // 메시지 전체 전송

    pthread_mutex_lock(&mutx);                         // 뮤텍스 잠금
    for (i = 0; i < clnt_cnt; i++)                     // 클라이언트 목록에서 제거
    {
        if (clnt_sock == clnt_socks[i])
        {
            while (i++ < clnt_cnt - 1)
                clnt_socks[i] = clnt_socks[i + 1];     // 배열 재정렬
            break;
        }
    }
    clnt_cnt--;                                        // 클라이언트 수 감소
    pthread_mutex_unlock(&mutx);                       // 뮤텍스 해제
    close(clnt_sock);                                  // 클라이언트 소켓 닫기
    return NULL;
}

void send_msg(char* msg, int len)
{
    int i;
    pthread_mutex_lock(&mutx);                         // 뮤텍스 잠금
    for (i = 0; i < clnt_cnt; i++)
        write(clnt_socks[i], msg, len);                // 모든 클라이언트에게 메시지 전송
    pthread_mutex_unlock(&mutx);                       // 뮤텍스 해제
}

void error_handling(char* msg)
{
    fputs(msg, stderr);                                // 에러 메시지 출력
    fputc('\n', stderr);
    exit(1);                                           // 프로그램 종료
}

char* serverState(int count)
{
    char* stateMsg = malloc(sizeof(char) * 20);        // 상태 메시지 동적 할당
    strcpy(stateMsg, "None");                          // 기본 값

    if (count < 5)
        strcpy(stateMsg, "Good");                      // 접속자 적을 때
    else
        strcpy(stateMsg, "Bad");                       // 접속자 많을 때

    return stateMsg;
}

void menu(char port[ ])
{
    system("clear");                                   // 화면 초기화
    printf(" ==== chat server ====\n");
    printf(" server port : %s\n", port);               // 포트 출력
    printf(" server state : %s\n", serverState(clnt_cnt));  // 서버 상태 출력
    printf(" max connection : %d\n", MAX_CLNT);        // 최대 접속자 수 출력
    printf(" ==== Log ====\n\n");                      // 로그 표시
}
