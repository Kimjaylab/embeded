#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<arpa/inet.h>
#include<sys/socket.h>
#include<pthread.h>
#include<time.h>

#define BUF_SIZE 100             // 메시지 버퍼 크기
#define NORMAL_SIZE 20           // 일반 문자열 크기

void* send_msg(void* arg);       // 메시지 송신 스레드 함수
void* recv_msg(void* arg);       // 메시지 수신 스레드 함수
void error_handling(char* msg);  // 에러 처리 함수
void menu();                     // 메뉴 출력 함수
void changeName();               // 닉네임 변경 함수
void menuOptions();              // 메뉴 동작 처리 함수

char name[NORMAL_SIZE] = "[DEFALT]";       // 사용자 이름
char msg_form[NORMAL_SIZE];                // 메시지 포맷용 버퍼
char serv_time[NORMAL_SIZE];               // 서버 시간 표시용 버퍼
char msg[BUF_SIZE];                        // 메시지 버퍼
char serv_port[NORMAL_SIZE];               // 서버 포트
char clnt_ip[NORMAL_SIZE];                 // 클라이언트 IP

int main(int argc, char* argv[])
{
    int sock;                                                  // 클라이언트 소켓
    struct sockaddr_in serv_addr;                              // 서버 주소
    pthread_t snd_thread, rcv_thread;                          // 송/수신 스레드
    void* thread_return;

    if (argc != 4)                                              // 인자 개수 확인
    {
        printf("Usage : %s <ip> <port> <name>\n", argv[0]);     // 사용법 안내
        exit(1);
    }

    struct tm* t;                                               // 시간 구조체
    time_t timer = time(NULL);                                  // 현재 시간
    t = localtime(&timer);                                      // 지역 시간으로 변환
    sprintf(serv_time, "%d-%d-%d %d:%d",                        // 서버 시간 문자열 저장
            t->tm_year + 1900, t->tm_mon + 1, t->tm_mday,
            t->tm_hour, t->tm_min);
    sprintf(name, "[%s]", argv[3]);                             // 이름 포맷 지정
    sprintf(clnt_ip, "%s", argv[1]);                            // 클라이언트 IP 저장
    sprintf(serv_port, "%s", argv[2]);                          // 서버 포트 저장

    sock = socket(PF_INET, SOCK_STREAM, 0);                     // 소켓 생성

    memset(&serv_addr, 0, sizeof(serv_addr));                   // 주소 초기화
    serv_addr.sin_family = AF_INET;                             // IPv4 설정
    serv_addr.sin_addr.s_addr = inet_addr(argv[1]);             // 서버 IP 설정
    serv_addr.sin_port = htons(atoi(argv[2]));                  // 서버 포트 설정

    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) == -1)
        error_handling("conncet( ) error");                     // 연결 실패 시 종료

    menu();                                                     // 메뉴 출력

    pthread_create(&snd_thread, NULL, send_msg, (void *)&sock); // 송신 스레드 생성
    pthread_create(&rcv_thread, NULL, recv_msg, (void *)&sock); // 수신 스레드 생성

    pthread_join(snd_thread, &thread_return);                   // 송신 스레드 종료 대기
    pthread_join(rcv_thread, &thread_return);                   // 수신 스레드 종료 대기

    close(sock);                                                // 소켓 종료
    return 0;
}

void* send_msg(void* arg)
{
    int sock = *((int *)arg);                                   // 소켓 추출
    char name_msg[NORMAL_SIZE + BUF_SIZE];                      // 이름+메시지 버퍼
    char myInfo[BUF_SIZE];                                      // 접속 메시지
    char* who = NULL;
    char temp[BUF_SIZE];

    printf(">> join the chat !! \n");                           // 접속 안내 메시지 출력
    sprintf(myInfo, "%s's join. IP_%s\n", name, clnt_ip);       // 접속 메시지 포맷
    write(sock, myInfo, strlen(myInfo));                        // 접속 메시지 전송

    while (1)
    {
        fgets(msg, BUF_SIZE, stdin);                            // 사용자 입력 받기

        if (!strcmp(msg, "!menu\n"))                            // 메뉴 호출 명령어
        {
            menuOptions();                                      // 메뉴 동작 처리
            continue;
        }
        else if (!strcmp(msg, "q\n") || !strcmp(msg, "Q\n"))    // 종료 명령어
        {
            close(sock);                                        // 소켓 닫고
            exit(0);                                            // 종료
        }

        sprintf(name_msg, "%s %s", name, msg);                  // 이름 포함 메시지 생성
        write(sock, name_msg, strlen(name_msg));                // 메시지 전송
    }
    return NULL;
}

void* recv_msg(void* arg)
{
    int sock = *((int *)arg);                                   // 소켓 추출
    char name_msg[NORMAL_SIZE + BUF_SIZE];                      // 수신 메시지 버퍼
    int str_len;

    while (1)
    {
        str_len = read(sock, name_msg, NORMAL_SIZE + BUF_SIZE - 1); // 메시지 수신
        if (str_len == -1)
            return (void *)-1;                                  // 오류 시 종료
        name_msg[str_len] = 0;                                  // 널 종료
        fputs(name_msg, stdout);                                // 메시지 출력
    }
    return NULL;
}

void menuOptions()
{
    int select;
    printf("\n\t=== menu mode ===\n");                          // 메뉴 표시
    printf("\t1. change name\n");
    printf("\t2. clear/update\n\n");
    printf("\tthe other key is cancel");
    printf("\n\t=================");
    printf("\n\t>> ");
    scanf("%d", &select);                                       // 메뉴 선택 입력
    getchar();                                                  // 개행 문자 제거

    switch (select)
    {
        case 1: changeName(); break;                            // 이름 변경
        case 2: menu(); break;                                  // 화면 초기화
        default: printf("\tcancel."); break;                    // 잘못된 선택
    }
}

void changeName()
{
    char nameTemp[100];
    printf("\n\tInput new name -> ");                           // 새 이름 입력
    scanf("%s", nameTemp);
    sprintf(name, "[%s]", nameTemp);                            // 이름 재설정
    printf("\n\tComplete.\n\n");                                // 완료 안내
}

void menu()
{
    system("clear");                                            // 화면 초기화
    printf(" ==== chatting client ====\n");
    printf(" server port : %s \n", serv_port);                  // 서버 포트 출력
    printf(" client IP : %s \n", clnt_ip);                      // 클라이언트 IP 출력
    printf(" chat name : %s \n", name);                         // 이름 출력
    printf(" server time : %s \n", serv_time);                  // 시간 출력
    printf(" ----------- menu ------------\n");
    printf(" if you want to select menu -> !menu\n");
    printf(" 1. change name\n");
    printf(" 2. clear/update\n");
    printf(" -----------------------------\n");
    printf(" Exit -> q & Q\n\n");
}

void error_handling(char* msg)
{
    fputs(msg, stderr);                                         // 에러 메시지 출력
    fputc('\n', stderr);
    exit(1);                                                    // 종료
}
