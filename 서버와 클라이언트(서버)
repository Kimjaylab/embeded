#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>

void error_handling(char* message);                           // 에러 출력 후 종료 함수 선언

int main(int argc, char* argv[])
{
    int serv_sock;                                            // 서버 소켓
    int clnt_sock;                                            // 클라이언트 소켓
    struct sockaddr_in serv_addr;                             // 서버 주소 구조체
    struct sockaddr_in clnt_addr;                             // 클라이언트 주소 구조체
    socklen_t clnt_addr_size;                                 // 클라이언트 주소 구조체 크기
    char message[] = "Hello World!";                          // 클라이언트에 보낼 메시지

    if (argc != 2) {                                          // 포트 번호 인자가 없으면 종료
        printf("Usage : %s <port>\n", argv[0]);
        exit(1);
    }

    serv_sock = socket(PF_INET, SOCK_STREAM, 0);              // TCP 소켓 생성
    if (serv_sock == -1)
        error_handling("socket( ) error");

    memset(&serv_addr, 0, sizeof(serv_addr));                 // serv_addr 구조체 0으로 초기화
    serv_addr.sin_family = AF_INET;                           // IPv4 사용
    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);            // 모든 IP에서 접속 허용
    printf("port : %s\n", argv[1]);                           
    serv_addr.sin_port = htons(atoi(argv[1]));                // 문자열 포트 번호 → 정수 → 네트워크 바이트 순서로 변환

    if (bind(serv_sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) == -1)
        error_handling("bind( ) error");                      // IP주소와 포트 할당

    if (listen(serv_sock, 5) == -1)
        error_handling("listen( ) error");                    // 연결 요청 대기 상태 진입 (백로그 큐 5)

    while (1)
    {
        printf("Server : waiting from any Client\n");
        clnt_addr_size = sizeof(clnt_addr);                   // 클라이언트 주소 크기 설정

        clnt_sock = accept(serv_sock, (struct sockaddr*)&clnt_addr, &clnt_addr_size); // 클라이언트 연결 수락
        if (clnt_sock == -1)
            error_handling("accept( ) error");

        write(clnt_sock, message, sizeof(message));           // 클라이언트에게 메시지 전송
        printf("Server : send to message for Client\n\n");

        close(clnt_sock);                                     // 클라이언트 소켓 닫기
    }

    close(serv_sock);                                         // 서버 소켓 닫기 (사실 위의 while문은 무한 루프)
    return 0;                                                 // 프로그램 종료
}

void error_handling(char* message)
{
    fputs(message, stderr);                                   // 에러 메시지를 stderr에 출력
    fputc('\n', stderr);                                      // 개행 문자 출력
    exit(1);                                                  // 비정상 종료
}
